;; embiff.el		Created      : Sat Jan  3 19:27:10 2004
;;			Last modified: Sun Jan 04 05:44:00 2004
;;------------------------------------------------------------
;; Written by Takashi Masuyama <mamewo@dk9.so-net.ne.jp>
;; FTP Directory: sources/emacs #
;;

(defvar embiff-program "/home/tak/bin/embiff")
(defconst embiff-buffername "embiff")

(defvar embiff-process nil)
(defvar embiff-mode-syntax-table nil "syntax table used in embiff mode")
(defvar embiff-mode-abbrev-table nil)
(defvar embiff-mode-map (make-sparse-keymap))
(defvar embiff-mode-hook nil)
(defvar embiff-title-list (list "so-net\n" "lab\n" "slash\n" "is\n" "turbo\n" "§ﬁ§·\n" "BBS\n" "alter\n" "live\n" "oabbs\n" "putty\n" ".com¡»\n"))
(defvar embiff-init-contents (apply 'concat embiff-title-list))

(defun embiff-new-id (line newface)
  (save-excursion
    (goto-line line)
    (beginning-of-line)
    (let ((start-pos (point)))
      (end-of-line)
      (let ((end-pos (point)))
	(put-text-property start-pos (+ end-pos 1) 'face newface)))))

(defun embiff-filter (proc str)
  (interactive)
  (let ((old-buffer (current-buffer)))
    (save-excursion
      (let* ((lst (split-string str "\t"))
	     (tag (car lst))
	     (title (cadr lst))
	     (buf (process-buffer proc)))
	(cond ((equal tag "R")
	       (let* ((value (caddr lst))
		    (str (concat title "\t" value))
		    (len (length str)))
	       (set-buffer buf)
;	       (if (get-buffer-window embiff-buffername)
;		   (set-buffer buf)
;		 (switch-to-buffer buf))
	       (setq buffer-read-only nil)
	       (beginning-of-buffer)
	       (if (search-forward-regexp (concat "^" title) nil t)
		   (progn
		     (beginning-of-line)
		     (kill-line)
		     (delete-char))
		 (goto-char (point-max)))
	       (let ((start-pos (point)))
		 (insert-string str)
	       (setq buffer-read-only t)
	       (put-text-property start-pos (+ start-pos len) 'face 'embiff-new-face))))
	      ((equal tag "C")
	       (beginning-of-buffer)
	       (if (search-forward-regexp (concat "^" title) nil t)
		   (progn (beginning-of-line)
			  (let ((start-pos (point)))
			    (end-of-line)
			    (let ((end-pos (point)))
			      (put-text-property start-pos end-pos 'face 'embiff-connecting-face))))))
	      ((equal tag "P")
	       (process-send-string proc (concat (read-passwd title) "\n")))
	      ((equal tag "Q")
	       (process-send-string proc (concat (read-string title) "\n")))
	      (t nil))))
    (set-buffer old-buffer)))
    
(defun embiff-checked ()
  (interactive)
  (save-excursion
    (beginning-of-line)
    (let ((start-pos (point)))
      (end-of-line)
      (let ((end-pos (point)))
	(if (< start-pos end-pos)
	    (put-text-property start-pos (+ end-pos 1) 'face 'embiff-checked-face))
	(next-line 1)))))

(define-key embiff-mode-map [return] 'embiff-checked)

(defun embiff-mode ()
  (interactive)
  (if (get-buffer embiff-buffername)
      (switch-to-buffer embiff-buffername)
    (let ((proc (start-process "embiff" embiff-buffername embiff-program)))
      (make-face 'embiff-new-face)
      (set-face-foreground 'embiff-new-face "red")
      (make-face-bold 'embiff-new-face)
      (make-face 'embiff-checked-face)
      (set-face-foreground 'embiff-checked-face "black")
      (make-face 'embiff-connecting-face)
      (set-face-background 'embiff-connecting-face "lightgreen")

      (set-process-filter proc 'embiff-filter)
      (switch-to-buffer embiff-buffername)
      (insert-string embiff-init-contents)
      (setq embiff-process proc)
      (if (not embiff-mode-syntax-table)
	  (setq embiff-mode-syntax-table (make-syntax-table)))
      (use-local-map embiff-mode-map)
      (set-syntax-table embiff-mode-syntax-table)
      (setq mode-name "embiff")
      (setq major-mode 'embiff-mode)
      (run-hooks 'embiff-mode-hook))))

(provide 'embiff)
